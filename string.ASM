use16	   ;Генерировать 16 битный код
org 100h   ;Программа наинается с адреса 100h
mov	cx, 200d   ;Максимальная длина строки
	lea	si,  [S]  ;Заносим адресс строки в si
	cld		  ;Задаем направление обхода
	jcxz	@Break	  ;Выходим если пустая строка
@For:			  ;Метка обхода строки
	lodsb		  ;Побайтно обходим строку
	cmp	al,	'c'		 ;Сравниваем с символом с
	jnz	@Test_d 		 ;Если не равны, переходим к следующей проверке
	inc	[Count_c]		 ;увеличить счётчик количества символов 'с' на 1
@Test_d:				;Метка проверки символа d
	cmp	al,	'd'		;Сравниваем с символом d
	jnz	@Test0			;Если не равны, переходим к следующей проверке
	inc	[Count_d]		;увеличить счётчик количества символов 'd' на 1
@Test0: 				;Метка проверки нуля
	cmp	al, '$' 	   ;Сравниваем с нулевым символом
	je     @Break		   ;Если равен переходим к следующей метке
@Next:				   ;Метка цикла
	loop	@For		   ;Цикл обхода строки
@Break: 			   ;Метка выхода из цикла
	mov ax,[Count_c]	   ;Кол-во символов с в dx
	cmp ax, [Count_d]	   ;Определяем каких символов больше
	jb @d_bl		   ;Если d больше переходим к метке @d_bl
	ja @c_bl		   ;Если с больше переходим к метке c_bl
	je @porovny		   ;Если равное количество, переходим к метке @porovny
@d_bl:				   ;Метка: d больше
	mov cx,more_d		   ;В cx адресс строки more_d
	jmp @ShowResult 	   ;Переход к выводу результатов
@c_bl:				   ;Метка: с больше
	mov cx,more_c		   ;В cx адресс строки more_c
	jmp @ShowResult 	   ;Переход к выводу результатов
@porovny:			   ;Метка: символов поровну
	mov cx,porovn		   ;В cx адресс строки more_c porovn
@ShowResult:			   ;Метка вывода информации
	mov	ah,	09h	    ;Заносим номер прерывания вовода строки
	lea	dx,	[hellostr]  ;Указываем строку для вывода
	int	21h		    ;Вызываем прерывание ms-dos
	lea	dx,	[S]	    ;Указываем строку для вывода
	int	21h		    ;Вызываем прерывание ms-dos
	call	@endline	    ;Перевод строки
	call	@endline	    ;Перевод строки
	lea	dx,	[kolvo_c]   ;Указываем строку для вывода
	int	21h		    ;Вызываем прерывание ms-dos
	mov ax,[Count_c]	    ;В ax кол-во с для процедуры вывода числа на консоль
	call	@outint 	    ;Вызов процедуры вывода числа на консоль
	call	@endline	    ;Перевод строки
	mov	ah,	09h	    ;Заносим номер прерывания вовода строки
	lea	dx,	[kolvo_d]   ;Указываем строку для вывода
	int	21h		    ;Вызываем прерывание ms-dos
	mov ax,[Count_d]	    ;В ax кол-во d для процедуры вывода числа на консоль
	call	@outint 	    ;Вызов процедуры вывода числа на консоль
	call	@endline	    ;Перевод строки
	mov	ah,	09h	    ;Заносим номер прерывания вовода строки
	mov dx,cx		    ;Указываем строку для вывода
	int	21h		    ;Вызываем прерывание ms-dos
	mov	ah,	8	    ;ожидание нажатия клавиши
	int	21h		    ;Вызываем прерывание ms-dos
	int	20h		    ;Вызываем прерывание ms-dos
;-----------------------------------------------------------------------------------
@endline:		  ;Метка процедуры перевод строки
	push	ax	  ;Сохраняем ax
	push	dx	   ;Сохраняем dx
	mov	ah,9	   ;Заносим номер прерывания вовода строки
	mov	dx, endlen   ;Указываем строку для вывода
	int	21h	      ;Вызываем прерывание ms-dos
	pop	dx		;Восстанавливаем dx
	pop	ax		;Восстанавливаем ax
	ret			;Выход из процедуры
;-----------------------------------------------------------------------------------
@outint:		   ;Метка процедуры вывода числа на консоль
	aam		   ;Корекция bcd числа
	add ax,3030h	   ;Переобразование к ASCII формату
	mov dl,ah	   ;В dl первую цифру для вывода
	mov dh,al	   ;В dh вторую цифру для вывода
	mov ah,02	   ;Заносим номер прерывания вовода строки
	int 21h 	   ;Вызываем прерывание ms-dos
	mov dl,dh	   ;В dl вторую цифру для вывода
	int 21h 	   ;Вызываем прерывание ms-dos
	ret		   ;Выход из процедуры

;-----------------------------------------------------------------------------------
;Переменные
Count_c   dw	  0		  ;количество символов "с"
Count_d   dw	  0		  ;количество символов "d"
S	 db	 'ccddddddddccccdddfghghgfhjuyudfgdfccccccccccccccdddddgfggfdgdfgdfgccccdddggffggfdgfcccccddddddddddddfdggjkgfdgfdgfghgfcccccdddjlkjhttryhrthfdgdfgdfgcccccccccdddgvdfffffdddd', '$'
hellostr    db	  'stroka dla podscheta: ', '$'
endlen			db	0Dh, 0Ah, '$'	;Символы перевода строки
kolvo_c   db	'chisel c v stroke ', '$'
kolvo_d   db	'chisel d v stroke ', '$'
more_c	 db    'simvolov c bolshe', '$'
more_d	 db    'simvolov d bolshe', '$'
porovn	 db    'odinakovoie kolichestvo', '$'