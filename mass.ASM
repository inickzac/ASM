use16	   ;Генерировать 16 битный код
org 100h   ;Программа наинается с адреса 100h
     lea     dx,     [first_m]	;Указываем строку для вывода
     call  vivod_mas	   ;Вызов процедуры вывода массива на консоль
     call  endline	   ;Переход на новую строку
     lea     si,  [mas]    ;В si адрес массива
     cld		   ;Задаем направление обхода
     mov cx, [mas_count]   ;В cx кол-во повторений цикла
@For:			   ;Метка цикла
     mov ax,[si]	   ;Элемент массива в ax для проверки на знак
     test ax,ax 	   ;Проверка на знак
     jns next		   ;Переходим если без знака
     call change_dw	   ;Вызов процедуры замены числа
next:			   ;Метка, если без знака
     lodsw		   ;Пословно  обходим массив
     loop @For		   ;Цикл обхода
     lea     dx,     [sec_m]  ;Указываем строку для вывода
     call vivod_mas	    ;Вызов процедуры вывода массива на консоль
     call  endline	   ;Переход на новую строку
     mov     ah,     09h	 ;Заносим номер прерывания вовода строки
     lea     dx,    [ChangeS]  ;Указываем строку для вывода
     int     21h		 ;Вызываем прерывание ms-dos
     mov ax, [count_change]	 ;Количесво замен в масиве в ax ля вывода
     call vivod_c		 ;Вызов процедуры вывода чисел на консоль
exit:				;Метка завершения программы
     mov     ah,     8		 ;ожидание нажатия клавиши
     int     21h		 ;Вызываем прерывание ms-dos
     int     20h		 ;Вызываем прерывание ms-dos
 ;-----------------------------------------------------------------------------
change_dw:			;Процедура замены числа в массиве
     mov dx,0			;Замена на 0
     mov [si],dx		;Записать по адресу в si
     inc  [count_change]	 ;Увеличиваем переменную счетчика замен
ret				 ;Выход из процедуры
 ;----------------------------------------------------------------------------
 vivod_c:		      ;Процедура вывода чисел на консоль
     push cx		      ;Сохраняем cx
     push dx		      ;Сохраняем dx
     test    ax, ax	      ;Проверка на знак
     jns     oi1	      ;Переходим если без знака
			      ;Если оно отрицательное, выведем минус и оставим его модуль.
     mov  cx, ax	      ;Число в cx
     mov     ah, 02h	      ;Номер прерывания
     mov     dl, '-'	      ;Символ минуса
     int     21h	      ;Вызываем прерывание ms-dos
     mov  ax, cx	      ;Освобождаем cx
     neg     ax 	      ;Делаем число положительным
			      ; Количество цифр будем держать в CX.
oi1:			      ;Метка положительного числа
     xor     cx, cx	      ;Обнуляем cx
     mov     bx, 10	      ;Основание  10
oi2:			      ;Метка цикла обхода числа
     xor     dx,dx	      ;Инвертируем биты
     div     bx 	      ;Делим число на основание сс. В остатке получается последняя цифра.
     push    dx 	      ;Сразу выводить её нельзя, поэтому сохраним её в стэке.
     inc     cx 	      ;Сохраняем cx
			      ;А с частным повторяем то же самое, отделяя от него очередную
			      ;цифру справа, пока не останется ноль, что значит, что дальше
			      ;слева только нули.
     test    ax, ax	      ;Проверка на ноль
     jnz     oi2	      ;Переход если не ноль
			      ;Вывод чисел
     mov     ah, 02h	      ;Номер прерывания
oi3:			      ;Метка вывода чисел
     pop     dx 	      ;Восстанавливаем dx
			      ;Извлекаем очередную цифру, переводим её в символ и выводим.
     add     dl, '0'	      ;Добавляем признак конца строки
     int     21h	      ;Вызываем прерывание ms-dos
			      ; Повторим ровно столько раз, сколько цифр насчитали.
     loop    oi3	      ;Цикл вывода чисел
     pop dx		      ;Восстанавливаем dx
     pop cx		      ;Восстанавливаем сx
     ret		      ;Выход из процедуры
 ;----------------------------------------------------
vivod_mas:			;Процедура вывода массива на консоль
     mov     ah,     09h	 ;Заносим номер прерывания вовода строки
     int     21h		 ;Вызываем прерывание ms-dos
     call  endline		 ;Переход на новую строку
     lea     si,  [mas] 	 ;В si адрес массива
     cld			 ;Задаем направление обхода
     mov cx, [mas_count]	 ;В cx кол-во повторений цикла
@Forv:				 ;Метка цикла
     lodsw			 ;Пословно  обходим массив
     call vivod_c		 ;Вызов процедуры вывода чисел на консоль
     mov     ah, 02h		 ;Номер прерывания вывода символа
     mov     dl, ' '		 ;Символ для вывода
     int     21h		 ;Вызываем прерывание ms-dos
     loop @Forv 		 ;Цикл обхода
     ret			 ;Выход из процедуры
;----------------------------------------------------
endline:		      ;Метка процедуры перевод строки
      push    ax	      ;Сохраняем ax
      push    dx	      ;Сохраняем dx
      mov     ah,9	      ;Заносим номер прерывания вовода строки
      mov     dx, endlen      ;Указываем строку для вывода
      int     21h	      ;Вызываем прерывание ms-dos
      pop     dx	      ;Восстанавливаем dx
      pop     ax	      ;Восстанавливаем ax
      ret		      ;Выход из процедуры
;---------------------------------------------------------
;Переменные
count_change dw 0											;Количество замен
mas dw -12d,-22d,34d,34d,-10d,-255d,-187d,145d,34d,345d,54d,-23d,238d,-234d,-56d,-123d,-234d,986d,187d	;Обрабатываемый массив
mas_count dw 19 								  ;Кол-во элементов массива
ChangeS   db	'Kolichestvo zamen: ', '$'
first_m   db	'Pervonacalnii masiv:', '$'
sec_m	db    'Obrabotanii masiv:', '$'
endlen	 db	 0Dh, 0Ah, '$'	 ;Символы перевода строки